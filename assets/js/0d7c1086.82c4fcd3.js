"use strict";(self.webpackChunkvis_engine_docs=self.webpackChunkvis_engine_docs||[]).push([[33],{8570:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(79);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(t),p=a,m=f["".concat(i,".").concat(p)]||f[p]||d[p]||o;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[f]="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4768:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>f});var r=t(7583),a=t(2475),o=(t(79),t(8570)),c=["components"],s={id:"gltf",title:"Draw GLTF"},i=void 0,l={unversionedId:"playground/gltf",id:"playground/gltf",title:"Draw GLTF",description:"\u5c55\u793a GLTF \u6a21\u578b\uff0cGLTFLoader \u5b9e\u73b0\u5728\u8fd9\u91cc\u3002",source:"@site/docs/playground/gltf.mdx",sourceDirName:"playground",slug:"/playground/gltf",permalink:"/vis-engine/docs/playground/gltf",draft:!1,editUrl:"https://github.com/sakitam-gis/vis-engine/edit/master/documents/docs/docs/playground/gltf.mdx",tags:[],version:"current",lastUpdatedBy:"sakitam-fdd",lastUpdatedAt:1678119405,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{id:"gltf",title:"Draw GLTF"},sidebar:"docs",previous:{title:"Draw Cloud",permalink:"/vis-engine/docs/playground/clouds"},next:{title:"Draw Mesh with mapbox-gl",permalink:"/vis-engine/docs/playground/mapbox-mesh"}},u={},f=[{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:3}],d={toc:f};function p(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u5c55\u793a GLTF \u6a21\u578b\uff0c",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sakitam-gis/vis-engine/blob/master/documents/src/components/GLTFLoader.ts"},"GLTFLoader")," \u5b9e\u73b0\u5728\u8fd9\u91cc\u3002"),(0,o.kt)("h3",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function render(props) {\n  const refDom = useRef(null);\n  const cameraRef = useRef(null);\n  const renderRef = useRef(null);\n\n  const store = leva.useCreateStore();\n\n  const fov = 45;\n  const nearZ = 0.006360928308397327;\n\n  const farZ = 6.360928308397327;\n\n  const config = {\n    fov: {\n      value: fov,\n      min: -180,\n      max: 180,\n      step: 1,\n      onChange: (f) => {\n        if (cameraRef.current) {\n          cameraRef.current.fov = f;\n        }\n      },\n    },\n    nearZ: {\n      value: nearZ,\n      min: -50,\n      max: 50,\n      step: 0.1,\n      onChange: (n) => {\n        if (cameraRef.current) {\n          cameraRef.current.near = n;\n        }\n      },\n    },\n    farZ: {\n      value: farZ,\n      min: -10,\n      max: 10,\n      step: 0.01,\n      onChange: (f) => {\n        if (cameraRef.current) {\n          cameraRef.current.far = f;\n        }\n      },\n    },\n    cameraPosition: {\n      value: [1.4605831301690517, 0.34327992612869196, 2.25837676990454],\n      onChange: (p) => {\n        if (cameraRef.current) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          cameraRef.current.position.set(...p);\n        }\n      },\n    },\n  };\n\n  leva.useControls(config, {\n    store: store,\n  });\n\n  const loadGLTF = async (\n    file = \'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/DamagedHelmet/glTF-Binary/DamagedHelmet.glb\',\n  ) => {\n    const data = await GLTFLoader.load(renderRef.current, file);\n\n    return data;\n  };\n\n  const init = () => {\n    const canvas = refDom.current;\n\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const renderer = new ve.Renderer(canvas, {\n      alpha: true,\n    });\n\n    renderRef.current = renderer;\n\n    const camera = new ve.PerspectiveCamera(fov, canvas.width / canvas.height, nearZ, farZ);\n    camera.position.set(1.4605831301690517, 0.34327992612869196, 2.25837676990454);\n    camera.rotation.set(-0.11987760646305476, 0.5391393785270148, -6.989052372931176e-18);\n    camera.quaternion.set(\n      -0.057739560789469936,\n      0.265838441571165,\n      0.0159531473635754,\n      0.9621546461936613,\n    );\n\n    cameraRef.current = camera;\n\n    function resize(target) {\n      const { width, height } = target.getBoundingClientRect();\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n    }\n\n    const scene = new ve.Scene();\n\n    loadGLTF().then((gltfObject) => {\n      scene.children.forEach((child) => child.setParent(null));\n\n      const s = gltfObject.scene || gltfObject.scenes[0];\n      s.forEach((root) => {\n        root.setParent(scene);\n      });\n\n      scene.updateMatrixWorld();\n\n      const raf = new ve.Raf(() => {\n        scene.rotation.y -= 0.02;\n        renderer.render({ scene, camera });\n      });\n    });\n\n    return {\n      canvas,\n      resize,\n    }\n  }\n\n  useEffect(() => {\n    const { canvas, resize } = init();\n\n    observe(canvas, resize);\n\n    return () => {\n      unobserve(canvas, resize);\n    };\n  }, []);\n\n  return (\n    <div className="live-wrap">\n      <div className="leva-wrap">\n        <Leva\n          collapsed\n          fill\n        ></Leva>\n        <LevaPanel collapsed store={store} fill></LevaPanel>\n      </div>\n      <canvas className="scene-canvas" ref={refDom}></canvas>\n    </div>\n  );\n}\n')))}p.isMDXComponent=!0}}]);