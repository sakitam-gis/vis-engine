"use strict";(self.webpackChunkvis_engine_docs=self.webpackChunkvis_engine_docs||[]).push([[5685],{8570:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(79);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),v=a,m=d["".concat(c,".").concat(v)]||d[v]||p[v]||o;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=v;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},5290:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>v,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(7583),a=t(2475),o=(t(79),t(8570)),i=["components"],s={id:"texture",title:"Draw Texture"},c=void 0,l={unversionedId:"playground/texture",id:"playground/texture",title:"Draw Texture",description:"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u5f15\u64ce Texture \u7eb9\u7406\u7684\u4f7f\u7528\u3002",source:"@site/docs/playground/texture.mdx",sourceDirName:"playground",slug:"/playground/texture",permalink:"/vis-engine/docs/playground/texture",draft:!1,editUrl:"https://github.com/sakitam-gis/vis-engine/edit/master/documents/docs/docs/playground/texture.mdx",tags:[],version:"current",lastUpdatedBy:"sakitam-fdd",lastUpdatedAt:1675839478,formattedLastUpdatedAt:"Feb 8, 2023",frontMatter:{id:"texture",title:"Draw Texture"},sidebar:"docs",previous:{title:"Draw Model",permalink:"/vis-engine/docs/playground"},next:{title:"Draw instance",permalink:"/vis-engine/docs/playground/instancing"}},u={},d=[{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",level:3}],p={toc:d};function v(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u5f15\u64ce ",(0,o.kt)("a",{parentName:"p",href:"/vis-engine/docs/api/classes/Texture"},"Texture")," \u7eb9\u7406\u7684\u4f7f\u7528\u3002"),(0,o.kt)("h3",{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"},"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function render(props) {\n  const drawModelVertex = `\n    attribute vec2 uv;\n    attribute vec3 position;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n    `;\n\n  const drawModelFragment = `\n    precision highp float;\n\n    uniform sampler2D texture;\n\n    varying vec2 vUv;\n\n    void main() {\n        vec3 tex = texture2D(texture, vUv).rgb;\n        gl_FragColor.rgb = tex;\n        gl_FragColor.a = 1.0;\n    }\n    `;\n\n  const refDom = useRef(null);\n\n  const store = leva.useCreateStore();\n\n  const fov = 15;\n  const nearZ = 0.1;\n\n  const farZ = 100;\n\n  // const { name, aNumber } = leva.useControls({ name: \'World1\', aNumber: 2 }, { store });\n\n  const image = useBaseUrl(\'/assets/posx.jpg\');\n\n  const init = () => {\n    const canvas = refDom.current;\n\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const renderer = new Renderer(canvas, {\n      alpha: true,\n    });\n\n    const camera = new PerspectiveCamera(fov, canvas.width / canvas.height, nearZ, farZ);\n    camera.position.z = 15;\n\n    function resize(target) {\n      const { width, height } = target.getBoundingClientRect();\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n    }\n\n    const scene = new Scene();\n\n    const geometry = new Geometry(renderer, {\n      position: {\n        size: 3,\n        data: new Float32Array([\n          -1, 1, 0,\n          -1, -1, 0,\n          1, 1, 0,\n          1, -1, 0\n        ])\n      },\n      uv: {\n        size: 2,\n        data: new Float32Array([0, 1, 1, 1, 0, 0, 1, 0])\n      },\n      index: {\n        data: new Uint16Array([0, 1, 2, 1, 3, 2])\n      },\n    });\n\n    const texture = new Texture(renderer, {\n      generateMipmaps: false,\n      flipY: true,\n    });\n\n    texture.fromSrc(image);\n\n    const program = new Program(renderer, {\n      vertexShader: drawModelVertex,\n      fragmentShader: drawModelFragment,\n      uniforms: {\n        texture: {\n          value: texture,\n        },\n      },\n    });\n\n    const triangles = new Mesh(renderer, { mode: renderer.gl.TRIANGLES, geometry, program });\n    triangles.setParent(scene);\n    triangles.position.set(0, 0, 0);\n\n    const raf = new Raf((t) => {\n      triangles.rotation.y -= 0.02;\n      renderer.render({ scene, camera });\n    });\n\n    return {\n      canvas,\n      resize,\n    }\n  }\n\n  useEffect(() => {\n    const { canvas, resize } = init();\n\n    observe(canvas, resize);\n\n    return () => {\n      unobserve(canvas, resize);\n    };\n  }, []);\n\n  return (\n    <div className="live-wrap">\n      <div className="leva-wrap">\n        <Leva\n          fill\n        ></Leva>\n        <LevaPanel store={store} fill></LevaPanel>\n      </div>\n      <canvas className="scene-canvas" ref={refDom}></canvas>\n    </div>\n  );\n}\n')))}v.isMDXComponent=!0}}]);