"use strict";(self.webpackChunkvis_engine_docs=self.webpackChunkvis_engine_docs||[]).push([[4794],{8570:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(79);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),m=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=m(t),d=a,f=l["".concat(c,".").concat(d)]||l[d]||p[d]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var m=2;m<o;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},807:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>m,toc:()=>l});var r=t(7583),a=t(2475),o=(t(79),t(8570)),i=["components"],s={id:"box",title:"Draw Box Geometry"},c=void 0,m={unversionedId:"playground/box",id:"playground/box",title:"Draw Box Geometry",description:"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u51e0\u4f55\u4f53\u5bf9\u8c61 Box \u7684\u4f7f\u7528\u3002",source:"@site/docs/playground/box.mdx",sourceDirName:"playground",slug:"/playground/box",permalink:"/vis-engine/docs/playground/box",draft:!1,editUrl:"https://github.com/sakitam-gis/vis-engine/edit/master/documents/docs/docs/playground/box.mdx",tags:[],version:"current",lastUpdatedBy:"sakitam-fdd",lastUpdatedAt:1676382941,formattedLastUpdatedAt:"Feb 14, 2023",frontMatter:{id:"box",title:"Draw Box Geometry"},sidebar:"docs",previous:{title:"Draw Plane Geometry",permalink:"/vis-engine/docs/playground/plane"},next:{title:"Draw Box Volume Geometry",permalink:"/vis-engine/docs/playground/box-volume"}},u={},l=[{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",level:3}],p={toc:l};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u51e0\u4f55\u4f53\u5bf9\u8c61 ",(0,o.kt)("a",{parentName:"p",href:"/vis-engine/docs/api/classes/Box"},"Box")," \u7684\u4f7f\u7528\u3002"),(0,o.kt)("h3",{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"},"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function render(props) {\n  const drawBoxVertex = `\n    attribute vec2 uv;\n    attribute vec3 position;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n    `;\n\n  const drawBoxFragment = `\n    precision highp float;\n    uniform float uTime;\n    varying vec2 vUv;\n    void main() {\n        gl_FragColor.rgb = 0.5 + 0.3 * sin(vUv.yxx + uTime) + vec3(0.2, 0.0, 0.1);\n        gl_FragColor.a = 1.0;\n    }\n    `;\n\n  const refDom = useRef(null);\n  const meshRef = useRef(null);\n  const cameraRef = useRef(null);\n  const renderRef = useRef(null);\n\n  const store = leva.useCreateStore();\n\n  const fov = 15;\n  const nearZ = 0.1;\n\n  const farZ = 100;\n\n  const updateGeometry = () => {\n    if (!renderRef.current) return;\n    const geometry = new Box(renderRef.current, {\n      width: store.get('width'),\n      height: store.get('height'),\n      depth: store.get('depth'),\n\n      widthSegments: store.get('widthSegments'),\n      heightSegments: store.get('heightSegments'),\n      depthSegments: store.get('depthSegments'),\n    });\n\n    if (meshRef.current) {\n      meshRef.current.updateGeometry(geometry);\n    }\n  }\n\n  const config = {\n    fov: {\n      value: fov,\n      min: -50,\n      max: 50,\n      step: 1,\n      onChange: (fov) => {\n        if (cameraRef.current) {\n          cameraRef.current.fov = fov;\n        }\n      },\n    },\n    nearZ: {\n      value: nearZ,\n      min: -50,\n      max: 50,\n      step: 0.1,\n      onChange: (nearZ) => {\n        if (cameraRef.current) {\n          cameraRef.current.near = nearZ;\n        }\n      },\n    },\n    farZ: {\n      value: farZ,\n      min: -500,\n      max: 500,\n      step: 1,\n      onChange: (farZ) => {\n        if (cameraRef.current) {\n          cameraRef.current.far = farZ;\n        }\n      },\n    },\n    cameraPosition: {\n      value: [0, 0, 15],\n      onChange: (p) => {\n        if (cameraRef.current) {\n          cameraRef.current.position.set(...p);\n        }\n      },\n    },\n    width: {\n      value: 2,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: () => {\n        updateGeometry();\n      },\n    },\n    height: {\n      value: 2,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    depth: {\n      value: 2,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    widthSegments: {\n      value: 1,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    heightSegments: {\n      value: 1,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    depthSegments: {\n      value: 1,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    wireframe: {\n      value: false,\n      onChange: (p) => {\n        if (meshRef.current) {\n          meshRef.current.wireframe = p;\n        }\n      },\n    }\n  };\n\n  leva.useControls(config, {\n    store: store,\n  });\n\n  const init = () => {\n    const canvas = refDom.current;\n\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const renderer = new Renderer(canvas, {\n      alpha: true,\n    });\n\n    renderRef.current = renderer;\n\n    const camera = new PerspectiveCamera(fov, canvas.width / canvas.height, nearZ, farZ);\n    camera.position.z = fov;\n    cameraRef.current = camera;\n\n    function resize(target) {\n      const { width, height } = target.getBoundingClientRect();\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n    }\n\n    const scene = new Scene();\n\n    const geometry = new Box(renderer, {\n      width: 2,\n      height: 2,\n      depth: 2,\n\n      widthSegments: 1,\n      heightSegments: 1,\n      depthSegments: 1,\n    });\n\n\n    const program = new Program(renderer, {\n      vertexShader: drawBoxVertex,\n      fragmentShader: drawBoxFragment,\n      uniforms: {\n        uTime: { value: 0 },\n      },\n    });\n\n    const box = new Mesh(renderer, { geometry, program, wireframe: false });\n    box.setParent(scene);\n    box.position.set(0, 0, 0);\n\n    meshRef.current = box;\n\n    const raf = new Raf((t) => {\n      box.rotation.y -= 0.02;\n      box.rotation.z -= 0.02;\n      program.setUniform('uTime', t);\n      renderer.render({ scene, camera });\n    });\n\n    return {\n      canvas,\n      resize,\n    }\n  }\n\n  useEffect(() => {\n    const { canvas, resize } = init();\n\n    observe(canvas, resize);\n\n    return () => {\n      unobserve(canvas, resize);\n    };\n  }, []);\n\n  return (\n    <div className=\"live-wrap\">\n      <div className=\"leva-wrap\">\n        <Leva\n          collapsed\n          fill\n        ></Leva>\n        <LevaPanel collapsed store={store} fill></LevaPanel>\n      </div>\n      <canvas className=\"scene-canvas\" ref={refDom}></canvas>\n    </div>\n  );\n}\n")))}d.isMDXComponent=!0}}]);