"use strict";(self.webpackChunkvis_engine_docs=self.webpackChunkvis_engine_docs||[]).push([[9003],{8281:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(5250),r=t(3274);const o={id:"instancing",title:"Draw instance"},s=void 0,i={id:"playground/instancing",title:"Draw instance",description:"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u5f15\u64ce\u5b9e\u4f8b\u5316\u6e32\u67d3\u5982\u4f55\u4f7f\u7528\u3002",source:"@site/docs/playground/instancing.mdx",sourceDirName:"playground",slug:"/playground/instancing",permalink:"/vis-engine/docs/playground/instancing",draft:!1,unlisted:!1,editUrl:"https://github.com/sakitam-gis/vis-engine/edit/master/documents/docs/docs/playground/instancing.mdx",tags:[],version:"current",lastUpdatedBy:"sakitam-fdd",lastUpdatedAt:1705508335,formattedLastUpdatedAt:"Jan 17, 2024",frontMatter:{id:"instancing",title:"Draw instance"},sidebar:"docs",previous:{title:"Draw Texture",permalink:"/vis-engine/docs/playground/texture"},next:{title:"Draw Plane Geometry",permalink:"/vis-engine/docs/playground/plane"}},c={},d=[{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",level:3}];function m(n){const e={code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u5f15\u64ce\u5b9e\u4f8b\u5316\u6e32\u67d3\u5982\u4f55\u4f7f\u7528\u3002"}),"\n",(0,a.jsx)(e.h3,{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",children:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",metastring:"live",live:!0,children:"function render(props) {\n  const drawModelVertex = `\n    attribute vec2 uv;\n    attribute vec3 position;\n    // Add instanced attributes just like any attribute\n    attribute vec3 offset;\n    attribute vec3 random;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    uniform float uTime;\n    varying vec2 vUv;\n    varying vec3 vNormal;\n\n    void rotate2d(inout vec2 v, float a){\n        mat2 m = mat2(cos(a), -sin(a), sin(a),  cos(a));\n        v = m * v;\n    }\n\n    void main() {\n        vUv = uv;\n\n        // copy position so that we can modify the instances\n        vec3 pos = position;\n\n        // scale first\n        pos *= 0.9 + random.y * 0.2;\n\n        // rotate around y axis\n        rotate2d(pos.xz, random.x * 6.28 + 4.0 * uTime * (random.y - 0.5));\n\n        // rotate around x axis just to add some extra variation\n        rotate2d(pos.zy, random.z * 0.5 * sin(uTime * random.x + random.z * 3.14));\n\n        pos += offset;\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n    }\n    `;\n\n  const drawModelFragment = `\n    precision highp float;\n\n    uniform float uTime;\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        vec3 tex = texture2D(tMap, vUv).rgb;\n\n        gl_FragColor.rgb = tex;\n        gl_FragColor.a = 1.0;\n    }\n    `;\n\n  const refDom = useRef(null);\n\n  const store = leva.useCreateStore();\n\n  const fov = 15;\n  const nearZ = 0.1;\n\n  const farZ = 100;\n\n  // const { name, aNumber } = leva.useControls({ name: 'World1', aNumber: 2 }, { store });\n\n  const image = useBaseUrl('/assets/acorn.jpg');\n  const json = useBaseUrl('/assets/acorn.json');\n\n  const init = () => {\n    const canvas = refDom.current;\n\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const renderer = new Renderer(canvas, {\n      alpha: true,\n    });\n\n    const camera = new PerspectiveCamera(fov, canvas.width / canvas.height, nearZ, farZ);\n    camera.position.z = 15;\n\n    function resize(target) {\n      const { width, height } = target.getBoundingClientRect();\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n    }\n\n    const scene = new Scene();\n\n    const texture = new Texture(renderer, {\n      flipY: true,\n    });\n\n    texture.fromSrc(image);\n\n    const program = new Program(renderer, {\n      vertexShader: drawModelVertex,\n      fragmentShader: drawModelFragment,\n      uniforms: {\n        uTime: { value: 0 },\n        tMap: { value: texture },\n      },\n      cullFace: renderer.gl.BACK,\n    });\n\n    const num = 60;\n\n    fetch(json).then(res => res.json()).then((data) => {\n      let offset = new Float32Array(num * 3);\n      let random = new Float32Array(num * 3);\n      for (let i = 0; i < num; i++) {\n        offset.set([Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1], i * 3);\n\n        // unique random values are always handy for instances.\n        // Here they will be used for rotation, scale and movement.\n        random.set([Math.random(), Math.random(), Math.random()], i * 3);\n      }\n\n      const geometry = new Geometry(renderer, {\n        position: { size: 3, data: new Float32Array(data.position) },\n        uv: { size: 2, data: new Float32Array(data.uv) },\n        normal: { size: 3, data: new Float32Array(data.normal) },\n\n        // simply add the 'instanced' property to flag as an instanced attribute.\n        // set the value as the divisor number\n        offset: { divisor: 1, size: 3, data: offset },\n        random: { divisor: 1, size: 3, data: random },\n      });\n\n      const mesh = new Mesh(renderer, { mode: renderer.gl.TRIANGLES, geometry, program });\n      mesh.setParent(scene);\n\n      const raf = new Raf((t) => {\n        if (mesh) mesh.rotation.y -= 0.005;\n        program.setUniform('uTime', t)\n        renderer.render({ scene, camera });\n      });\n    });\n\n    return {\n      canvas,\n      resize,\n    }\n  }\n\n  useEffect(() => {\n    const { canvas, resize } = init();\n\n    observe(canvas, resize);\n\n    return () => {\n      unobserve(canvas, resize);\n    };\n  }, []);\n\n  return (\n    <div className=\"live-wrap\">\n      <div className=\"leva-wrap\">\n        <Leva\n          fill\n        ></Leva>\n        <LevaPanel store={store} fill></LevaPanel>\n      </div>\n      <canvas className=\"scene-canvas\" ref={refDom}></canvas>\n    </div>\n  );\n}\n"})})]})}function l(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}},3274:(n,e,t)=>{t.d(e,{Z:()=>i,a:()=>s});var a=t(79);const r={},o=a.createContext(r);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);