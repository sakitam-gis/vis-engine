"use strict";(self.webpackChunkvis_engine_docs=self.webpackChunkvis_engine_docs||[]).push([[5090],{709:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(5250),a=t(3274);const s={id:"plane",title:"Draw Plane Geometry"},o=void 0,i={id:"playground/plane",title:"Draw Plane Geometry",description:"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u51e0\u4f55\u4f53\u5bf9\u8c61 Plane \u7684\u4f7f\u7528\u3002",source:"@site/docs/playground/plane.mdx",sourceDirName:"playground",slug:"/playground/plane",permalink:"/vis-engine/docs/playground/plane",draft:!1,unlisted:!1,editUrl:"https://github.com/sakitam-gis/vis-engine/edit/master/documents/docs/docs/playground/plane.mdx",tags:[],version:"current",lastUpdatedBy:"sakitam-fdd",lastUpdatedAt:1711203377,formattedLastUpdatedAt:"Mar 23, 2024",frontMatter:{id:"plane",title:"Draw Plane Geometry"},sidebar:"docs",previous:{title:"Draw instance",permalink:"/vis-engine/docs/playground/instancing"},next:{title:"Draw Box Geometry",permalink:"/vis-engine/docs/playground/box"}},c={},l=[{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",level:3}];function m(n){const e={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u51e0\u4f55\u4f53\u5bf9\u8c61 ",(0,r.jsx)(e.a,{href:"/vis-engine/docs/api/classes/Plane",children:"Plane"})," \u7684\u4f7f\u7528\u3002"]}),"\n",(0,r.jsx)(e.h3,{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",children:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",metastring:"live",live:!0,children:"function render(props) {\n  const drawPlaneVertex = `\n    attribute vec2 uv;\n    attribute vec3 position;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n    `;\n\n  const drawPlaneFragment = `\n    precision highp float;\n\n    uniform sampler2D texture;\n\n    varying vec2 vUv;\n\n    void main() {\n        vec3 tex = texture2D(texture, vUv).rgb;\n        gl_FragColor.rgb = tex;\n        gl_FragColor.a = 1.0;\n    }\n    `;\n\n  const refDom = useRef(null);\n  const meshRef = useRef(null);\n  const cameraRef = useRef(null);\n  const renderRef = useRef(null);\n\n  const store = leva.useCreateStore();\n\n  const fov = 15;\n  const nearZ = 0.1;\n\n  const farZ = 100;\n\n  const updateGeometry = () => {\n    if (!renderRef.current) return;\n    const geometry = new Plane(renderRef.current, {\n      width: store.get('width'),\n      height: store.get('height'),\n\n      widthSegments: store.get('widthSegments'),\n      heightSegments: store.get('heightSegments'),\n    });\n\n    if (meshRef.current) {\n      meshRef.current.updateGeometry(geometry);\n    }\n  }\n\n  const config = {\n    fov: {\n      value: fov,\n      min: -50,\n      max: 50,\n      step: 1,\n      onChange: (fov) => {\n        if (cameraRef.current) {\n          cameraRef.current.fov = fov;\n        }\n      },\n    },\n    nearZ: {\n      value: nearZ,\n      min: -50,\n      max: 50,\n      step: 0.1,\n      onChange: (nearZ) => {\n        if (cameraRef.current) {\n          cameraRef.current.near = nearZ;\n        }\n      },\n    },\n    farZ: {\n      value: farZ,\n      min: -500,\n      max: 500,\n      step: 1,\n      onChange: (farZ) => {\n        if (cameraRef.current) {\n          cameraRef.current.farZ = farZ;\n        }\n      },\n    },\n    cameraPosition: {\n      value: [0, 0, 15],\n      onChange: (p) => {\n        if (cameraRef.current) {\n          cameraRef.current.position.set(...p);\n        }\n      },\n    },\n    width: {\n      value: 2,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: () => {\n        updateGeometry();\n      },\n    },\n    height: {\n      value: 2,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    widthSegments: {\n      value: 1,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    heightSegments: {\n      value: 1,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    wireframe: {\n      value: false,\n      onChange: (p) => {\n        if (meshRef.current) {\n          meshRef.current.wireframe = p;\n        }\n      },\n    }\n  };\n\n  leva.useControls(config, {\n    store: store,\n  });\n\n  const image = useBaseUrl('/assets/posx.jpg');\n\n  const init = () => {\n    const canvas = refDom.current;\n\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const renderer = new Renderer(canvas, {\n      alpha: true,\n    });\n\n    renderRef.current = renderer;\n\n    const camera = new PerspectiveCamera(fov, canvas.width / canvas.height, nearZ, farZ);\n    camera.position.z = fov;\n    cameraRef.current = camera;\n\n    function resize(target) {\n      const { width, height } = target.getBoundingClientRect();\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n    }\n\n    const scene = new Scene();\n\n    const geometry = new Plane(renderer, {\n      width: 2,\n      height: 2,\n\n      widthSegments: 1,\n      heightSegments: 1,\n    });\n\n    const texture = new Texture(renderer, {\n      generateMipmaps: false,\n      flipY: true,\n    });\n\n    texture.fromSrc(image);\n\n    const program = new Program(renderer, {\n      vertexShader: drawPlaneVertex,\n      fragmentShader: drawPlaneFragment,\n      uniforms: {\n        texture: {\n          value: texture,\n        },\n      },\n    });\n\n    const plane = new Mesh(renderer, { geometry, program, wireframe: false });\n    plane.setParent(scene);\n    plane.position.set(0, 0, 0);\n\n    meshRef.current = plane;\n\n    const raf = new Raf((t) => {\n      plane.rotation.y -= 0.02;\n      renderer.render({ scene, camera });\n    });\n\n    return {\n      canvas,\n      resize,\n    }\n  }\n\n  useEffect(() => {\n    const { canvas, resize } = init();\n\n    observe(canvas, resize);\n\n    return () => {\n      unobserve(canvas, resize);\n    };\n  }, []);\n\n  return (\n    <div className=\"live-wrap\">\n      <div className=\"leva-wrap\">\n        <Leva\n          fill\n        ></Leva>\n        <LevaPanel collapsed store={store} fill></LevaPanel>\n      </div>\n      <canvas className=\"scene-canvas\" ref={refDom}></canvas>\n    </div>\n  );\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}},3274:(n,e,t)=>{t.d(e,{Z:()=>i,a:()=>o});var r=t(79);const a={},s=r.createContext(a);function o(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);