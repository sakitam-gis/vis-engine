"use strict";(self.webpackChunkvis_engine_docs=self.webpackChunkvis_engine_docs||[]).push([[5090],{8570:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>d});var t=r(79);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),f=a,d=p["".concat(c,".").concat(f)]||p[f]||m[f]||o;return r?t.createElement(d,i(i({ref:n},u),{},{components:r})):t.createElement(d,i({ref:n},u))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},1230:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var t=r(7583),a=r(2475),o=(r(79),r(8570)),i=["components"],s={id:"plane",title:"Draw Plane Geometry"},c=void 0,l={unversionedId:"playground/plane",id:"playground/plane",title:"Draw Plane Geometry",description:"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u51e0\u4f55\u4f53\u5bf9\u8c61 Plane \u7684\u4f7f\u7528\u3002",source:"@site/docs/playground/plane.mdx",sourceDirName:"playground",slug:"/playground/plane",permalink:"/vis-engine/docs/playground/plane",draft:!1,editUrl:"https://github.com/sakitam-gis/vis-engine/edit/master/documents/docs/docs/playground/plane.mdx",tags:[],version:"current",lastUpdatedBy:"sakitam-fdd",lastUpdatedAt:1676382941,formattedLastUpdatedAt:"Feb 14, 2023",frontMatter:{id:"plane",title:"Draw Plane Geometry"},sidebar:"docs",previous:{title:"Draw instance",permalink:"/vis-engine/docs/playground/instancing"},next:{title:"Draw Box Geometry",permalink:"/vis-engine/docs/playground/box"}},u={},p=[{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",level:3}],m={toc:p};function f(e){var n=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u8fd9\u4e2a\u5b9e\u4f8b\u4e3b\u8981\u5c55\u793a\u4e86\u51e0\u4f55\u4f53\u5bf9\u8c61 ",(0,o.kt)("a",{parentName:"p",href:"/vis-engine/docs/api/classes/Plane"},"Plane")," \u7684\u4f7f\u7528\u3002"),(0,o.kt)("h3",{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"},"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function render(props) {\n  const drawPlaneVertex = `\n    attribute vec2 uv;\n    attribute vec3 position;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n    `;\n\n  const drawPlaneFragment = `\n    precision highp float;\n\n    uniform sampler2D texture;\n\n    varying vec2 vUv;\n\n    void main() {\n        vec3 tex = texture2D(texture, vUv).rgb;\n        gl_FragColor.rgb = tex;\n        gl_FragColor.a = 1.0;\n    }\n    `;\n\n  const refDom = useRef(null);\n  const meshRef = useRef(null);\n  const cameraRef = useRef(null);\n  const renderRef = useRef(null);\n\n  const store = leva.useCreateStore();\n\n  const fov = 15;\n  const nearZ = 0.1;\n\n  const farZ = 100;\n\n  const updateGeometry = () => {\n    if (!renderRef.current) return;\n    const geometry = new Plane(renderRef.current, {\n      width: store.get('width'),\n      height: store.get('height'),\n\n      widthSegments: store.get('widthSegments'),\n      heightSegments: store.get('heightSegments'),\n    });\n\n    if (meshRef.current) {\n      meshRef.current.updateGeometry(geometry);\n    }\n  }\n\n  const config = {\n    fov: {\n      value: fov,\n      min: -50,\n      max: 50,\n      step: 1,\n      onChange: (fov) => {\n        if (cameraRef.current) {\n          cameraRef.current.fov = fov;\n        }\n      },\n    },\n    nearZ: {\n      value: nearZ,\n      min: -50,\n      max: 50,\n      step: 0.1,\n      onChange: (nearZ) => {\n        if (cameraRef.current) {\n          cameraRef.current.near = nearZ;\n        }\n      },\n    },\n    farZ: {\n      value: farZ,\n      min: -500,\n      max: 500,\n      step: 1,\n      onChange: (farZ) => {\n        if (cameraRef.current) {\n          cameraRef.current.farZ = farZ;\n        }\n      },\n    },\n    cameraPosition: {\n      value: [0, 0, 15],\n      onChange: (p) => {\n        if (cameraRef.current) {\n          cameraRef.current.position.set(...p);\n        }\n      },\n    },\n    width: {\n      value: 2,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: () => {\n        updateGeometry();\n      },\n    },\n    height: {\n      value: 2,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    widthSegments: {\n      value: 1,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    heightSegments: {\n      value: 1,\n      min: 1,\n      max: 100,\n      step: 1,\n      onChange: (p) => {\n        updateGeometry();\n      },\n    },\n    wireframe: {\n      value: false,\n      onChange: (p) => {\n        if (meshRef.current) {\n          meshRef.current.wireframe = p;\n        }\n      },\n    }\n  };\n\n  leva.useControls(config, {\n    store: store,\n  });\n\n  const image = useBaseUrl('/assets/posx.jpg');\n\n  const init = () => {\n    const canvas = refDom.current;\n\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const renderer = new Renderer(canvas, {\n      alpha: true,\n    });\n\n    renderRef.current = renderer;\n\n    const camera = new PerspectiveCamera(fov, canvas.width / canvas.height, nearZ, farZ);\n    camera.position.z = fov;\n    cameraRef.current = camera;\n\n    function resize(target) {\n      const { width, height } = target.getBoundingClientRect();\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n    }\n\n    const scene = new Scene();\n\n    const geometry = new Plane(renderer, {\n      width: 2,\n      height: 2,\n\n      widthSegments: 1,\n      heightSegments: 1,\n    });\n\n    const texture = new Texture(renderer, {\n      generateMipmaps: false,\n      flipY: true,\n    });\n\n    texture.fromSrc(image);\n\n    const program = new Program(renderer, {\n      vertexShader: drawPlaneVertex,\n      fragmentShader: drawPlaneFragment,\n      uniforms: {\n        texture: {\n          value: texture,\n        },\n      },\n    });\n\n    const plane = new Mesh(renderer, { geometry, program, wireframe: false });\n    plane.setParent(scene);\n    plane.position.set(0, 0, 0);\n\n    meshRef.current = plane;\n\n    const raf = new Raf((t) => {\n      plane.rotation.y -= 0.02;\n      renderer.render({ scene, camera });\n    });\n\n    return {\n      canvas,\n      resize,\n    }\n  }\n\n  useEffect(() => {\n    const { canvas, resize } = init();\n\n    observe(canvas, resize);\n\n    return () => {\n      unobserve(canvas, resize);\n    };\n  }, []);\n\n  return (\n    <div className=\"live-wrap\">\n      <div className=\"leva-wrap\">\n        <Leva\n          fill\n        ></Leva>\n        <LevaPanel collapsed store={store} fill></LevaPanel>\n      </div>\n      <canvas className=\"scene-canvas\" ref={refDom}></canvas>\n    </div>\n  );\n}\n")))}f.isMDXComponent=!0}}]);