"use strict";(self.webpackChunkvis_engine_docs=self.webpackChunkvis_engine_docs||[]).push([[5684],{8570:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(79);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(t),u=a,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=t(7583),a=t(2475),o=(t(79),t(8570)),s=["components"],i={id:"mapbox-gltf",title:"Draw GLTF with mapbox-gl"},c=void 0,l={unversionedId:"playground/mapbox-gltf",id:"playground/mapbox-gltf",title:"Draw GLTF with mapbox-gl",description:"\u7ed3\u5408 mapbox-gl \u7684\u81ea\u5b9a\u4e49\u56fe\u5c42\u6e32\u67d3 GLTF.",source:"@site/docs/playground/mapbox-gltf.mdx",sourceDirName:"playground",slug:"/playground/mapbox-gltf",permalink:"/vis-engine/docs/playground/mapbox-gltf",draft:!1,editUrl:"https://github.com/sakitam-gis/vis-engine/edit/master/documents/docs/docs/playground/mapbox-gltf.mdx",tags:[],version:"current",lastUpdatedBy:"sakitam-fdd",lastUpdatedAt:1679751069,formattedLastUpdatedAt:"Mar 25, 2023",frontMatter:{id:"mapbox-gltf",title:"Draw GLTF with mapbox-gl"},sidebar:"docs",previous:{title:"Draw Box Mesh with mapbox-gl",permalink:"/vis-engine/docs/playground/mapbox-box-mesh"},next:{title:"Draw GLTF with maptalks",permalink:"/vis-engine/docs/playground/maptalks-gltf"}},p={},m=[{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:3}],d={toc:m};function u(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u7ed3\u5408 mapbox-gl \u7684\u81ea\u5b9a\u4e49\u56fe\u5c42\u6e32\u67d3 GLTF."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"\u4e3b\u8981\u56e0\u4e3a\u6709\u5730\u5f62\u9700\u8981\u64cd\u4f5c\u4e00\u4e0b\u5730\u56fe\uff0c\u731c\u6d4b\u662f\u4e3a\u4e86\u91cd\u65b0\u66f4\u65b0\u77e9\u9635\u3002")),(0,o.kt)("h3",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function render(props) {\n  const refDom = useRef(null);\n\n  const store = leva.useCreateStore();\n\n  class MeshLayer {\n    constructor (id) {\n      this.id = id;\n      this.type = 'custom';\n      this.renderingMode = '3d';\n    }\n\n    get camera () {\n      return this.sync.camera;\n    }\n\n    updateCamera() {\n      this.sync.update();\n    }\n\n    projectToWorld (coord) {\n      const mc = mbve.fromLngLat({\n          lng: coord[0],\n          lat: coord[1],\n        }, coord[2]);\n\n      return [mc.x, mc.y, mc.z];\n    }\n\n    async loadGLTF (\n      file = 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/DamagedHelmet/glTF-Binary/DamagedHelmet.glb',\n    ) {\n      const data = await GLTFLoader.load(this.renderer, file);\n\n      return data;\n    }\n\n    onAdd (map, gl) {\n      this.renderer = new Renderer(gl, {\n        autoClear: false,\n      });\n      this.scene = new Scene();\n      this.sync = new mbve.CameraSync(map, 'perspective', this.scene);\n      this.updateCamera = this.updateCamera.bind(this);\n      map.on('move', this.updateCamera);\n      map.on('resize', this.updateCamera);\n\n      this.loadGLTF().then((gltfObject) => {\n        this.scene.children.forEach((child) => child.setParent(null));\n\n        const s = gltfObject.scene || gltfObject.scenes[0];\n\n        const coords = [6.58968, 45.39701, 1913.2236908406628];\n        // const coords = [6.58968, 45.39701, 0];\n        const center = this.projectToWorld(coords);\n        s[0].position.set(\n          center[0],\n          center[1],\n          center[2] + mbve.mercatorZfromAltitude(100, 45.39701),\n        );\n        s[0].quaternion.fromAxisAngle(\n          new Vector3(0, 1, 0),\n          (180 * Math.PI) / 180,\n        );\n        const scale = mbve.meterInMercatorCoordinateUnits(center[1]) * 100;\n        s[0].scale.set(scale, scale, scale);\n        // \u4e3a\u4ec0\u4e48\u5728\u81ea\u5b9a\u4e49\u56fe\u5c42\u4e2dFrontFace\u4e0d\u4e00\u6837\uff0c\u731c\u6d4b\u53ef\u80fd\u4e0e\u9876\u70b9\u6570\u636e\u7ec4\u7ec7\u6709\u5173\u7cfb\n        s[0].children[0].program.setStates({\n          frontFace: this.renderer.gl.CW,\n        });\n        s.forEach((root) => {\n          this.scene.add(root);\n        });\n        console.log(this.scene, scale);\n      });\n\n      this.updateCamera();\n    }\n\n    onRemove () {\n    }\n\n    prerender () {\n    }\n\n    render () {\n      this.scene.worldMatrixNeedsUpdate = true;\n      this.renderer.render({\n        scene: this.scene,\n        camera: this.camera,\n      });\n      this.renderer.resetState();\n    }\n  }\n\n  const init = () => {\n    mapboxgl.accessToken = 'pk.eyJ1IjoidTEwaW50IiwiYSI6InQtMnZvTkEifQ.c8mhXquPE7_xoB3P4Ag8cA';\n\n    if (mapboxgl.Map.prototype._setupPainter.toString().indexOf('webgl2') === -1) {\n      const setupPainterPrev = mapboxgl.Map.prototype._setupPainter;\n      mapboxgl.Map.prototype._setupPainter = function () {\n        const getContextPrev = this._canvas.getContext;\n        this._canvas.getContext = function (name, attrib) {\n          return getContextPrev.apply(this, ['webgl2', attrib]) ||\n              getContextPrev.apply(this, ['webgl', attrib]) ||\n              getContextPrev.apply(this, ['experimental-webgl', attrib]);\n        };\n        setupPainterPrev.apply(this);\n        this._canvas.getContext = getContextPrev;\n      };\n    }\n\n    const map = new mapboxgl.Map({\n      container: refDom.current,\n      zoom: 13.954629345329566,\n      center: [6.58968, 45.39701],\n      pitch: 77.00000000000013,\n      bearing: 0,\n      style: 'mapbox://styles/mapbox/satellite-streets-v12',\n      antialias: true,\n      projection: 'mercator',\n      // projection: 'globe',\n    });\n    map.on('load', () => {\n      map.addSource('mapbox-dem', {\n        'type': 'raster-dem',\n        'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n        'tileSize': 512,\n        'maxzoom': 14\n      });\n      // add the DEM source as a terrain layer with exaggerated height\n      map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1 });\n      const layer = new MeshLayer('mesh');\n      map.addLayer(layer);\n      window.layer = layer;\n    });\n\n    window.map = map;\n\n    return map;\n  }\n\n  useEffect(() => {\n    const map = init();\n\n    return () => {\n      console.log(map);\n    };\n  }, []);\n\n  return (\n    <div className=\"live-wrap\">\n      <div className=\"leva-wrap\">\n        <Leva\n          collapsed\n          fill\n        ></Leva>\n        <LevaPanel collapsed store={store} fill></LevaPanel>\n      </div>\n      <div className=\"scene-canvas\" ref={refDom}></div>\n    </div>\n  );\n}\n")))}u.isMDXComponent=!0}}]);